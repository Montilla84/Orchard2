@using Orchard.ContentManagement.Metadata.Settings;
@using Orchard.Layers.ViewModels;

@model LayerPartEditViewModel

@inject IContentManager ContentManager
@inject Orchard.ContentManagement.MetaData.IContentDefinitionManager ContentDefinitionManager
@inject Orchard.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.Settings.ToObject<ContentTypeSettings>().Stereotype == "Widget");
}

<script asp-name="jquery-ui" at="Foot"></script>

<fieldset class="form-group">
    <fieldset class="form-group" asp-validation-class-for="LayerPart.Rule">
        <label asp-for="LayerPart.Rule">@T["Rule"] <span asp-validation-for="LayerPart.Rule"></span></label>
        <input asp-for="LayerPart.Rule" class="form-control" />
        <span class="hint">@T["A logical expression defining the condition that renders the widgets from this layer."]</span>
    </fieldset>
</fieldset>

<fieldset class="form-group">
    @foreach (var zone in Model.AvailableZones)
    {
        var widgetTemplatePlaceholderId = Guid.NewGuid().ToString("n");

        <div class="widget-layer-zone card">
            <div class="card-header text-muted">
                @zone
            </div>
            <div class="widget-editor-body card-block" data-zone="@zone">
                <div id="@widgetTemplatePlaceholderId" class="widget-template-placeholder">
                    @{ var htmlFieldPrefix = this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix; }

                    @if (Model.LayerPart.Widgets.ContainsKey(zone))
                    {
                        foreach (var widget in Model.LayerPart.Widgets[zone])
                        {
                            var prefix = Guid.NewGuid().ToString("n");
                                <div class="widget-template">
                                    @{
                                        var widgetEditor = await ContentItemDisplayManager.BuildEditorAsync(widget, Model.Updater, "", prefix);

                                        widgetEditor.ZonesName = Html.NameFor(x => x.Zones);
                                        widgetEditor.PrefixesName = Html.NameFor(x => x.Prefixes);
                                        widgetEditor.ContentTypesName = Html.NameFor(x => x.ContentTypes);
                                        widgetEditor.TargetId = widgetTemplatePlaceholderId;

                                        widgetEditor.Metadata.Alternates.Add("Widget_Edit__Layer");
                                    }

                                    @await DisplayAsync(widgetEditor)

                                    @{ this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix; }
                                    <input type="hidden" asp-for="Zones" value="@zone" class="source-zone" />
                                    <input type="hidden" asp-for="Prefixes" value="@prefix" />
                                    <input type="hidden" asp-for="ContentTypes" value="@widget.ContentType" />
                                </div>
                        }
                    }
                </div>

                <div class="btn-group ">
                    <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @T["Add Widget"]
                    </button>
                    <div class="dropdown-menu">
                        @foreach (var type in widgetContentTypes)
                        {
                            <a class="dropdown-item add-layer-widget  btn-sm"
                               data-target-id="@widgetTemplatePlaceholderId"
                               data-zones-name="@Html.NameFor(x => x.Zones)"
                               data-prefixes-name="@Html.NameFor(x => x.Prefixes)"
                               data-contenttypes-name="@Html.NameFor(x => x.ContentTypes)"
                               data-widget-type="@type.Name"
                               data-zone="@zone"
                               href="#">@type.DisplayName</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Context.Items["LayerPart.Edit"] == null)
    {
        Context.Items["LayerPart.Edit"] = new object();
        <input type="hidden" id="buildEditorUrl" value="@Url.Action("BuildEditor", "Admin", new { area = "Orchard.Layers"  })" />

        <div style="display:none">
            @foreach (var type in widgetContentTypes)
            {
                // Render a mock widget so that its resources are included in the page
                var contentItem = ContentManager.New(type.Name);
                await DisplayAsync(await ContentItemDisplayManager.BuildEditorAsync(contentItem, Model.Updater, "", Guid.NewGuid().ToString("n")));
            }
        </div>

        <script asp-src="/Orchard.Layers/Scripts/layers.edit.js" at="Foot" depends-on="admin"></script>
        <style asp-src="/Orchard.Layers/Styles/layers.edit.css"></style>
    }

    <script at="Foot">
        $(".widget-template-placeholder").sortable({
            handle: ".widget-editor-header",
            cursor: "move",
            connectWith: '.widget-template-placeholder',
            receive: function (event, ui) {
                var newZone = ui.item.closest('.widget-editor-body').data("zone");
                var zoneInput = ui.item.find('.source-zone').val(newZone);
            }
        });
    </script>
</fieldset>
